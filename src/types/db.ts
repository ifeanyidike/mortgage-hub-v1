import {
  ColumnType,
  Generated,
  Insertable,
  JSONColumnType,
  Selectable,
  Updateable,
} from "kysely";

export interface Database {
  users: UserTable;
  brokers: BrokerTable;
  lenders: LenderTable;
  loans: LoanTable;
  notifications: NotificationTable;
  accounts: AccountTable;
  user_profile: UserProfileTable;
  messages: MessagesTable;
  documents: DocumentsTable;
  leads: LeadsTable;
  purchases: PurchasesTable;
}

// This interface describes the `person` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Person`,
// `NewPerson` and `PersonUpdate` types below.
export interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<string>;
  name: string | null;
  password: string | null;
  email: string;
  role?: "user" | "broker" | "lender";
  picture: string | null;
  is_email_verified?: boolean;
  is_phone_verified?: boolean;
  phone: string | null;
  dob: string | null;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  created_at?: Generated<Date>;
  updated_at?: Date | null;
  account_status: "pending_claim" | "claimed" | null;
  claim_token: string | null;
  claimed_at: Date | null;
  claim_token_expires_at: Date | null;

  // You can specify JSON columns using the `JSONColumnType` wrapper.
  // It is a shorthand for `ColumnType<T, string, string>`, where T
  // is the type of the JSON object/array retrieved from the database,
  // and the insert and update types are always `string` since you're
  // always stringifying insert/update values.
  //   metadata: JSONColumnType<{
  //     login_at: string;
  //     ip: string | null;
  //     agent: string | null;
  //     plan: "free" | "premium";
  //   }>;
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type ExistingUser = Omit<Selectable<UserTable>, "password">;
export type ExistingUserWithPword = Selectable<UserTable>;
export type NewUser = Insertable<UserTable>;
export type UserUpdate = Updateable<UserTable>;

export interface AccountTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  user_id: string;
  provider: string | null;
  email: string;
  access_token: string;
  refresh_token: string | null;
  access_token_expires_at: Date | null; // Optional
}

export type Account = Selectable<AccountTable>;
export type NewAccount = Insertable<AccountTable>;
export type AccountUpdate = Updateable<AccountTable>;

export interface BrokerTable {
  id: Generated<string>;
  user_id: string;
  company: string | null;
  title: string | null;
  lic: string | null;
  location: Record<"address" | "city" | "province", string> | null;
  service_areas: string[] | null;
  description: string | null;
  fax: string | null;
  postal_code: string | null;
  website: string | null;
  social_links: Partial<
    Record<"facebook" | "instagram" | "x" | "linkedin" | "custom_link", string>
  > | null;
  broker_id: string | null;
  is_company: string | null;
  broker_type: string | null;
  created_at?: Date;
}

export type Broker = Selectable<BrokerTable>;
export type NewBroker = Insertable<BrokerTable>;
export type BrokerUpdate = Updateable<BrokerTable>;

export interface LenderTable {
  id: Generated<string>;
  user_id: string;
  financial_document: string | null;
  total_investment: number;
  available_funds: number;
  joined_at: Date;
}

export type Lender = Selectable<LenderTable>;
export type NewLender = Insertable<LenderTable>;
export type LenderUpdate = Updateable<LenderTable>;

export interface LoanTable {
  id: Generated<string>;
  user_id: string;
  broker_id: string;
  lender_id: string;
  amount: number;
  interest_rate: number;
  duration_months: number;
  status: "pending" | "approved" | "rejected" | "active";
  created_at: Generated<ColumnType<Date, string, never>>;
  updated_at: ColumnType<Date, string>;
}

export type Loan = Selectable<LoanTable>;
export type NewLoan = Insertable<LoanTable>;
export type LoanUpdate = Updateable<LoanTable>;

export interface NotificationTable {
  id: Generated<string>;
  user_id: string;
  message: string;
  is_read: boolean;
  created_at: Generated<ColumnType<Date, string, never>>;
}

export type Notification = Selectable<NotificationTable>;
export type NewNotification = Insertable<NotificationTable>;
export type NotificationUpdate = Updateable<NotificationTable>;

export interface UserProfileTable {
  id: Generated<string>;
  user_id: string;
  location: Record<"address" | "city" | "province", string> | null;
  tools_selection?: {
    tools: (
      | "budgeting"
      | "credit_builder"
      | "mortgage_assistance"
      | "broker_finder"
      | "all"
    )[];
    do_later: boolean;
  };

  social_insurance_number: string | null;
  postal_code: string;
  goal?: number | null;

  // Employment and Income Details
  employer_name: string | null;
  job_title: string | null;
  annual_income: number | null;
  employment_start_date: string | null;

  // Financial Information
  savings_amount: number | null;
  credit_card_balance: number | null;
  other_debt: number | null;

  // Credit History
  credit_check_consent: boolean;
  credit_score: string | null;

  // Mortgage-Specific Information
  down_payment: number | null;
  down_payment_source: string | null;
  intended_property_type: string | null;
  intended_property_address: string | null;
  intended_property_price: number | null;

  // Marital and Family Status
  marital_status: string | null;
  number_of_dependents: number | null;

  // Legal and Residency Status
  residency_status: string;
  government_id_type: string | null;
  government_id_number: string | null;

  updated_at?: ColumnType<Date, string>;
  created_at?: Generated<ColumnType<Date, string, never>>;
}

export type UserProfile = Selectable<UserProfileTable>;
export type NewUserProfile = Insertable<UserProfileTable>;
export type UserProfileUpdate = Updateable<UserProfileTable>;

export interface LeadsTable {
  id: Generated<string>;
  user_id: string;
  down_payment?: number | null;
  property_price: number;
  down_payment_source?: string | null;
  property_type?: string | null;
  property_address?: string | null;
  type: "shared" | "exclusive";
  is_sold?: boolean;
  updated_at?: ColumnType<Date, string>;
  created_at?: Generated<ColumnType<Date, string, never>>;
}

export type Leads = Selectable<LeadsTable>;
export type NewLeads = Insertable<LeadsTable>;
export type LeadsUpdate = Updateable<LeadsTable>;

export interface PurchasesTable {
  id: Generated<string>;
  lead_id: string;
  broker_id: string;
  purchased_at: Date;
  amount_paid: number;
  lead_type?: "shared" | "exclusive";
  currency?: string;
  payment_method?: string;
  updated_at?: ColumnType<Date, string>;
  created_at?: Generated<ColumnType<Date, string, never>>;
}

export type Purchases = Selectable<PurchasesTable>;
export type NewPurchases = Insertable<PurchasesTable>;
export type PurchasesUpdate = Updateable<PurchasesTable>;

export interface MessagesTable {
  id: Generated<string>;
  sender_id: string;
  receiver_id: string;
  content: string;
  is_read?: boolean;
  sent_at?: ColumnType<Date, string>;
}

export type Messages = Selectable<MessagesTable>;
export type NewMessages = Insertable<MessagesTable>;
export type MessagesUpdate = Updateable<MessagesTable>;

export interface DocumentsTable {
  id: Generated<string>;
  user_id: string;
  name: string;
  type: string;
  url: string;
  size?: number | null;
  description?: string | null;
  updated_at?: ColumnType<Date, string>;
  created_at?: Generated<ColumnType<Date, string, never>>;
}

export type Documents = Selectable<DocumentsTable>;
export type NewDocuments = Insertable<DocumentsTable>;
export type DocumentsUpdate = Updateable<DocumentsTable>;
